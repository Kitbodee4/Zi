// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © kitbode

//@version=5
indicator("Zigzag Inside Bar + Breakout (v5)", overlay=true, max_lines_count=500, max_labels_count=500, max_bars_back=5000)

var color color_normal_high = color.rgb(0, 140, 255)
var color color_normal_low  = color.rgb(255, 85, 0)
var color color_amb_up_red  = color.red
var color color_amb_up_green = color.green
var color color_amb_down_red = color.purple
var color color_amb_down_green = color.yellow
var int lineCounter = 0

var bool isBullish = na
var bool isBearish = na
isBullish := close > open
isBearish := close < open

inside = high < high[1] and low > low[1]
var bool pendingInsideBar = false
var float[] prevhighArray = array.new_float(0)
var float[] prevlowArray  = array.new_float(0)

if inside
    array.push(prevhighArray, high[1])
    array.push(prevlowArray, low[1])
    pendingInsideBar := true
    if array.size(prevhighArray) > 20
        array.remove(prevhighArray, 0)
    if array.size(prevlowArray) > 20
        array.remove(prevlowArray, 0)

highBreakout = array.size(prevhighArray) > 0 and high > array.max(prevhighArray)
lowBreakout  = array.size(prevlowArray) > 0 and low < array.min(prevlowArray)

if highBreakout or lowBreakout
    array.clear(prevhighArray)
    array.clear(prevlowArray)
    pendingInsideBar := false

isAmbiguous = high > high[1] and low < low[1]

candleColor = isAmbiguous  ? color.purple :
              inside       ? color.yellow :
              highBreakout ? color.lime   :
              lowBreakout  ? color.red    : na
plotcandle(open, high, low, close,
     color       = candleColor,
     wickcolor   = candleColor,
     bordercolor = candleColor)

var float lastZigzagEndPrice = na
var int   lastZigzagEndBar   = na
var bool  lastWasHigh        = na
var float lastPivotPrice = na
var int   lastPivotBar   = na
var float segmentLowestLow   = na
var int   segmentLowestLowBar = na
var float segmentHighestHigh  = na
var int   segmentHighestHighBar = na
var float preAmbHigh = na
var int   preAmbHighBar = na
var float preAmbLow = na
var int   preAmbLowBar = na

pivotHigh = ta.pivothigh(1,0)
pivotLow = ta.pivotlow(1, 0)

if not (not na(pivotHigh) and not na(pivotLow))
    preAmbHigh := high
    preAmbHighBar := bar_index
    preAmbLow := low
    preAmbLowBar := bar_index

f_confirmSwingLine(int counter, int bar1, float price1, int bar2, float price2, color lineColor) =>
    log.info("f_confirmSwingLine called: Counter=" + str.tostring(counter) + ", Bar1=" + str.tostring(bar1) + ", Price1=" + str.tostring(price1) + ", Bar2=" + str.tostring(bar2) + ", Price2=" + str.tostring(price2))
    
    if not na(price1)
       // if bar1 != bar2
        line.new(bar1, price1, bar2, price2, color=lineColor, width=3)
        log.info("Line drawn: From Bar=" + str.tostring(bar1) + ", Price=" + str.tostring(price1) + " to Bar=" + str.tostring(bar2) + ", Price=" + str.tostring(price2))
            
    else
        log.info("Line skipped: Price1 is na")
    [price2, bar2]

var bool pendingAmbiguous = false
bool prioritizeHigh = false
bool prioritizeLow  = false

if isAmbiguous
    pendingAmbiguous := true
    label.new(bar_index, high, "AMB", color=color.green, style=label.style_label_down, textcolor=color.white, size=size.tiny)

clear_pendingamb = (high > high[1] or low < low[1]) and (high[1] > high[2] and low[1] < low[2])
if clear_pendingamb
    pendingAmbiguous := false

if na(segmentLowestLow) or low < segmentLowestLow
    segmentLowestLow := low
    segmentLowestLowBar := bar_index

if na(segmentHighestHigh) or high > segmentHighestHigh
    segmentHighestHigh := high
    segmentHighestHighBar := bar_index

if pendingInsideBar
    bool inside_h = na
    bool inside_l = na
    if not na(pivotLow)
